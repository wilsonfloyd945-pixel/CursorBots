# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç (long polling, Windows 11 OK) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ú–µ–Ω—é —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏: "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", "–ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å–æ—Å—Ç–æ—è–Ω–∏–µ".
- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –∏–∑ OPENROUTER_MODELS (CSV). –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
- –û—Ç–≤–µ—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ò–ò –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.
- –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –∏ —Ç—Ä–∏–º–º–∏–Ω–≥ –ø–æ –ª–∏–º–∏—Ç—É —Ç–æ–∫–µ–Ω–æ–≤.
- –û—Ü–µ–Ω–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–º–µ–µ—Ç –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É).
- –ù–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (parse_mode –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º) ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.
"""

from __future__ import annotations
import os, time, math, asyncio, logging, base64
from io import BytesIO
from typing import Dict, List, Tuple

import requests
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# -------------------- ENV & –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("__main__")

BOT_TOKEN = (os.getenv("TELEGRAM_BOT_TOKEN") or "").strip()
OR_API_KEY = (os.getenv("OPENROUTER_API_KEY") or "").strip()
OR_BASE_URL = (os.getenv("OPENROUTER_BASE_URL") or "https://openrouter.ai/api/v1").rstrip("/")
OR_MODELS_CSV = (os.getenv("OPENROUTER_MODELS") or "").strip()
OR_DEFAULT_MODEL = (os.getenv("OPENROUTER_DEFAULT_MODEL") or "").strip()
OR_HTTP_REFERER = (os.getenv("OPENROUTER_HTTP_REFERER") or "").strip()
OR_TITLE = (os.getenv("OPENROUTER_TITLE") or "").strip()

if not BOT_TOKEN:
    raise RuntimeError("–í .env –Ω–µ—Ç TELEGRAM_BOT_TOKEN")
if not OR_API_KEY:
    raise RuntimeError("–í .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENROUTER_API_KEY")

AVAILABLE_MODELS: List[str] = [m.strip() for m in OR_MODELS_CSV.split(",") if m.strip()]

# -------------------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ --------------------
UserId = int
USER_MODEL: Dict[UserId, str] = {}
USER_CONTEXT: Dict[UserId, List[Dict[str, str]]] = {}
LAST_USE: Dict[UserId, float] = {}
MIN_INTERVAL_SEC = 3.0

# –ª–∏–º–∏—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
CONTEXT_MAX_TOKENS = 8000
REPLY_MAX_CHARS = 4000

# -------------------- —É—Ç–∏–ª–∏—Ç—ã --------------------
def clip(text: str, n: int = REPLY_MAX_CHARS) -> str:
    return text if len(text) <= n else text[:n] + "\n\n‚Ä¶–æ–±—Ä–µ–∑–∞–Ω–æ‚Ä¶"

def estimate_tokens(text: str) -> int:
    if not text: return 0
    return max(1, int(math.ceil(len(text) / 3.7)))  # –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞

def estimate_messages_tokens(messages: List[Dict[str, str]]) -> int:
    total = 0
    for m in messages:
        total += estimate_tokens(m.get("content", ""))
        total += 4  # –Ω–∞ —Ä–∞–∑–º–µ—Ç–∫—É/—Ä–æ–ª—å
    return total

def trim_context(messages: List[Dict[str, str]], max_tokens: int) -> Tuple[List[Dict[str, str]], int]:
    if not messages:
        return messages, 0
    total = estimate_messages_tokens(messages)
    if total <= max_tokens:
        return messages, total

    system_msg = None
    start = 0
    if messages[0].get("role") == "system":
        system_msg = messages[0]
        start = 1
    tail = messages[start:]
    keep_min = min(len(tail), 8)

    cut = 0
    while True:
        candidate = ([system_msg] if system_msg else []) + tail[cut:]
        total = estimate_messages_tokens(candidate)
        if total <= max_tokens or (len(tail) - cut) <= keep_min:
            return candidate, total
        cut += 1

def context_stats(messages: List[Dict[str, str]], max_tokens: int) -> Tuple[int, float]:
    used = estimate_messages_tokens(messages)
    pct = min(100.0, (used / max_tokens) * 100.0 if max_tokens > 0 else 0.0)
    return used, pct

def wants_image(user_text: str, model_id: str) -> bool:
    t = (user_text or "").lower()
    if any(k in t for k in ["–Ω–∞—Ä–∏—Å—É–π", "–∫–∞—Ä—Ç–∏–Ω–∫—É", "–∫–∞—Ä—Ç–∏–Ω–∫–∞", "—Ä–∏—Å—É–Ω–æ–∫", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "image", "illustration", "art"]):
        return True
    m = (model_id or "").lower()
    return ("image" in m) or ("flash-image" in m)

def main_menu_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å")],
        [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"), KeyboardButton("üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å–æ—Å—Ç–æ—è–Ω–∏–µ")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def models_inline_keyboard(models: List[str]) -> InlineKeyboardMarkup:
    if not models:
        return InlineKeyboardMarkup([[InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç ‚Äî –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å?", callback_data="models_empty")]])
    rows, row = [], []
    for m in models:
        title = m if len(m) <= 32 else m[:29] + "‚Ä¶"
        row.append(InlineKeyboardButton(title, callback_data=f"set_model::{m}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    return InlineKeyboardMarkup(rows)

# -------------------- OpenRouter --------------------
def call_openrouter(model: str, messages: List[Dict[str, str]], need_image: bool, timeout_sec: int = 45):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict:
      {"type": "text", "text": "..."} –ò–õ–ò
      {"type": "images", "images": [data_url,...], "text": caption} –ò–õ–ò
      {"type": "error", "text": "..."}
    """
    if not model:
        return {"type": "error", "text": "–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å¬ª."}

    url = f"{OR_BASE_URL}/chat/completions"
    headers = {"Authorization": f"Bearer {OR_API_KEY}", "Content-Type": "application/json"}
    if OR_HTTP_REFERER: headers["HTTP-Referer"] = OR_HTTP_REFERER
    if OR_TITLE: headers["X-Title"] = OR_TITLE

    payload = {
        "model": model,
        "messages": messages,
        "temperature": 0.7,
    }
    if need_image:
        payload["modalities"] = ["image", "text"]

    try:
        resp = requests.post(url, headers=headers, json=payload, timeout=timeout_sec)
    except requests.exceptions.RequestException as e:
        return {"type": "error", "text": f"OpenRouter —Å–µ—Ç—å/—Ç–∞–π–º–∞—É—Ç: {e}"}

    if resp.status_code == 401:
        return {"type": "error", "text": "OpenRouter 401: –∫–ª—é—á –Ω–µ –ø—Ä–∏–Ω—è—Ç (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ OPENROUTER_API_KEY)."}
    if resp.status_code == 402:
        return {"type": "error", "text": "OpenRouter 402: –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å/–ª–∏–º–∏—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å."}
    if resp.status_code != 200:
        return {"type": "error", "text": f"OpenRouter HTTP {resp.status_code}: {resp.text[:300]}"}

    try:
        data = resp.json()
    except Exception as e:
        return {"type": "error", "text": f"OpenRouter –ø–∞—Ä—Å–∏–Ω–≥ JSON: {e}"}

    msg = (data.get("choices") or [{}])[0].get("message", {}) or {}

    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = msg.get("images") or []
    urls = []
    for im in images:
        url_data = (im.get("image_url") or {}).get("url")
        if isinstance(url_data, str) and url_data.startswith("data:image"):
            urls.append(url_data)
    if urls:
        caption = (msg.get("content") or "").strip()
        return {"type": "images", "images": urls, "text": caption}

    # –ò–Ω–∞—á–µ ‚Äî —Ç–µ–∫—Å—Ç
    content = (msg.get("content") or "").strip()
    if content:
        return {"type": "text", "text": content}

    return {"type": "error", "text": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏."}

# -------------------- —Ö–µ–Ω–¥–ª–µ—Ä—ã --------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
    if uid not in USER_CONTEXT:
        USER_CONTEXT[uid] = [{"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –ø–æ-—Ä—É—Å—Å–∫–∏."}]
    if uid not in USER_MODEL and OR_DEFAULT_MODEL:
        USER_MODEL[uid] = OR_DEFAULT_MODEL

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ò–ò —á–µ—Ä–µ–∑ OpenRouter.\n"
        "1) –ù–∞–∂–º–∏—Ç–µ ¬´ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n"
        "2) –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ—Ç–≤–µ—á—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é.\n"
        "–ö–Ω–æ–ø–∫–∏: ¬´üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç¬ª, ¬´üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å–æ—Å—Ç–æ—è–Ω–∏–µ¬ª.",
        reply_markup=main_menu_keyboard()
    )

async def show_models(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ."
    if not AVAILABLE_MODELS:
        text = (
            "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Å—Ç—Ä–æ–∫—É OPENROUTER_MODELS –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "OPENROUTER_MODELS=provider/modelA,provider/modelB:free\n"
            "–ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
        )
    await update.message.reply_text(text, reply_markup=models_inline_keyboard(AVAILABLE_MODELS))

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q: return
    data = q.data or ""
    uid = q.from_user.id

    if data == "models_empty":
        await q.answer()
        await q.edit_message_text(
            "OPENROUTER_MODELS –ø—É—Å—Ç. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
        )
        return

    if data.startswith("set_model::"):
        model = data.split("set_model::", 1)[1]
        USER_MODEL[uid] = model
        await q.answer("–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ ‚úÖ", show_alert=False)
        await q.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å:\n{model}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–≤–µ—á—É.")
        return

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return

    uid = update.effective_user.id
    text = update.message.text.strip()

    # –ê–Ω—Ç–∏-—Å–ø–∞–º
    now = time.time()
    last = LAST_USE.get(uid, 0.0)
    if now - last < MIN_INTERVAL_SEC:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ üôè", reply_markup=main_menu_keyboard())
        return
    LAST_USE[uid] = now

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (ReplyKeyboard)
    if text.startswith("ü§ñ"):
        await show_models(update, context)
        return
    if text.startswith("üóëÔ∏è"):
        USER_CONTEXT[uid] = [{"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –ø–æ-—Ä—É—Å—Å–∫–∏."}]
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω ‚úÖ", reply_markup=main_menu_keyboard())
        return
    if text.startswith("üìä"):
        msgs = USER_CONTEXT.get(uid, [])
        used, pct = context_stats(msgs, CONTEXT_MAX_TOKENS)
        await update.message.reply_text(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: ~{used} —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ {CONTEXT_MAX_TOKENS} (~{pct:.1f}%)", reply_markup=main_menu_keyboard())
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model = USER_MODEL.get(uid, "").strip()
    if not model:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å: –Ω–∞–∂–º–∏—Ç–µ ¬´ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å¬ª.", reply_markup=main_menu_keyboard())
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    USER_CONTEXT.setdefault(uid, [{"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –ø–æ-—Ä—É—Å—Å–∫–∏."}])

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—Ä–∏–º–º–∏–º –∏—Å—Ç–æ—Ä–∏—é
    USER_CONTEXT[uid].append({"role": "user", "content": text})
    USER_CONTEXT[uid], _ = trim_context(USER_CONTEXT[uid], CONTEXT_MAX_TOKENS)

    # –ò–Ω–¥–∏–∫–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    placeholder = await update.message.reply_text("–î—É–º–∞—é‚Ä¶")

    need_image = wants_image(text, model)

    # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter –≤ –ø—É–ª–µ
    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(None, call_openrouter, model, USER_CONTEXT[uid], need_image)

    # –ú—è–≥–∫–∏–π –ø–æ–≤—Ç–æ—Ä –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —Å–±–æ—è—Ö
    if result.get("type") == "error" and any(k in result.get("text","").lower() for k in ["—Ç–∞–π–º–∞—É—Ç", "temporari", "timeout", "econnreset", "enotfound"]):
        await asyncio.sleep(1.2)
        result = await loop.run_in_executor(None, call_openrouter, model, USER_CONTEXT[uid], need_image)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if result.get("type") == "images":
        # –£–¥–∞–ª–∏–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        try:
            await placeholder.delete()
        except Exception:
            pass

        caption = result.get("text") or "–ì–æ—Ç–æ–≤–æ ‚úÖ"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        for data_url in result.get("images", []):
            b64 = data_url.split(",", 1)[1] if "," in data_url else data_url
            raw = base64.b64decode(b64)
            bio = BytesIO(raw); bio.name = "image.png"
            await update.message.reply_photo(photo=bio)

        USER_CONTEXT[uid].append({"role": "assistant", "content": caption})
        await update.message.reply_text(clip(caption), reply_markup=main_menu_keyboard())
        return

    if result.get("type") == "text":
        text_out = clip(result.get("text",""))
        USER_CONTEXT[uid].append({"role": "assistant", "content": text_out})
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≥–æ—Ç–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º (–±–µ–∑ parse_mode)
        try:
            await context.bot.edit_message_text(
                chat_id=placeholder.chat_id,
                message_id=placeholder.message_id,
                text=text_out,
                disable_web_page_preview=True,
            )
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await update.message.reply_text(text_out, disable_web_page_preview=True, reply_markup=main_menu_keyboard())
        return

    # –û—à–∏–±–∫–∞
    err = clip(result.get("text","–û—à–∏–±–∫–∞"))
    USER_CONTEXT[uid].append({"role": "assistant", "content": err})
    try:
        await context.bot.edit_message_text(
            chat_id=placeholder.chat_id,
            message_id=placeholder.message_id,
            text=err,
            disable_web_page_preview=True,
        )
    except Exception:
        await update.message.reply_text(err, disable_web_page_preview=True, reply_markup=main_menu_keyboard())

# -------------------- –∑–∞–ø—É—Å–∫ --------------------
def main() -> None:
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (long polling). Ctrl+C ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.")
    app.run_polling()

if __name__ == "__main__":
    main()
